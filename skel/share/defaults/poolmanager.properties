#  -----------------------------------------------------------------------
#     Default values for pool manager
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Cell name of poolmanager
poolmanager.cell.name=PoolManager

#  ---- Whether to export the poolmanager cell as a well known cell
#
#  This property controls whether the poolmanager cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)poolmanager.cell.export=true

# Message topics to subscribe to (broadcast is kept for backwards compatibility
# with pools before 2.13).
poolmanager.cell.subscribe=PoolUpTopic,broadcast

# Pool manager plugins
poolmanager.plugins.selection-unit = diskCacheV111.poolManager.PoolSelectionUnitV2

poolmanager.plugins.quota-manager = none

# Cell address of pnfsmanager.
poolmanager.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
poolmanager.service.pnfsmanager.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)poolmanager.service.pnfsmanager.timeout.unit=MINUTES

# Cell address of pinmanager service
poolmanager.service.pinmanager=${dcache.service.pinmanager}

# Timeout for pinmanager requests
poolmanager.service.pinmanager.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)poolmanager.service.pinmanager.timeout.unit=MILLISECONDS

# Cell address of billing service
poolmanager.service.billing=${dcache.service.billing}

# Cell address to which to send pool status changes
poolmanager.destination.pool-status=PoolStatusTopic

# Timeout for pool requests
poolmanager.service.pool.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)poolmanager.service.pool.timeout.unit=MILLISECONDS

# Authorization file for staging from tape
poolmanager.authz.staging=${dcache.authz.staging}

# Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager|${dcache.authz.staging.pep})poolmanager.authz.staging.pep=${dcache.authz.staging.pep}

#  ---- Setup file for PoolManager
#
#   Must be writeable by user ${dcache.user} for the 'save' command of
#   PoolManager to work.
#
poolmanager.setup.file=@poolmanager.setup.file@

#
#  Whether or not to send a cache hit or miss message to the billing cell
#  on each request.
#
(one-of?true|false)poolmanager.enable.cache-hit-message = false

##
#  ------------------------------ Resilience ---------------------------------
##

#  ---- Whether resilience is enabled.
#
#       This will determine whether a special pool selection unit
#       implementation is built upon initialization of this domain.
#
(one-of?true|false|${dcache.enable.resilience})poolmanager.enable.resilience=${dcache.enable.resilience}

poolmanager.destination.resilience=ResilienceTopic

#  ---- Max number of concurrent messages sent from pool selection unit commands.
#
#       Since these changes are user interactive and involve fire-and-forget
#       messages, the necessary number of threads is minimal.
#
poolmanager.resilience.threads=3
