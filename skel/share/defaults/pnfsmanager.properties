#  -----------------------------------------------------------------------
#     Default values for pnfsmanager
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Cell name of pnfsmanager service
pnfsmanager.cell.name=PnfsManager

#  ---- Whether to export the pnfsmanager cell as a well known cell
#
#  This property controls whether the pnfsmanager cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)pnfsmanager.cell.export=true

#   -- replace with org.dcache.chimera.namespace.ChimeraEnstoreStorageInfoExtractor
#      if you are running an enstore HSM backend.
#
(forbidden)hsmStorageInfoExtractor = Use pnfsmanager.plugins.storage-info-extractor
pnfsmanager.plugins.storage-info-extractor = org.dcache.chimera.namespace.ChimeraOsmStorageInfoExtractor

#  ---- Number of threads per thread group
#
#   Depending on how powerful your chimera server host is you may set
#   this to up to 50.
#
(forbidden)pnfsNumberOfThreads = Use pnfsmanager.limits.threads-per-group
pnfsmanager.limits.threads-per-group = 12

#  ---- Number of thread groups
#
#   A PNFS tree may be split into multiple databases. Each database is
#   single threaded and hence accessing the same database from
#   multiple threads provides only a minor speed-up. To ensure good
#   load balancing when using multiple databases, the PnfsManager
#   supports thread groups. Any database is assigned to one and only
#   one thread group, thus databases assigned to different thread
#   groups are guaranteed not to block each other. Each thread group
#   will have ${pnfsmanager.limits.threads-per-group} threads.
#
#   For best performance isolation, set this to be equal the largest
#   database ID defined in PNFS. When increasing
#   pnfsmanager.limits.thread-groups, you may want to lower
#   pnfsmanager.limits.threads-per-group.
#
#   Notice that PNFS access is still subject to the number of threads
#   created in the PNFS daemon. If this number is lower than the
#   number of concurrent requests, then contention may still occur
#   even though multiple databases are used.
#
(forbidden)pnfsNumberOfThreadGroups = Use pnfsmanager.limits.thread-groups
pnfsmanager.limits.thread-groups = 1

#  ---- Number of list threads
#
#   The PnfsManager uses dedicated threads for directory list
#   operations. This variable controls the number of threads to
#   use.
#
(forbidden)pnfsNumberOfListThreads = Use pnfsmanager.limits.list-threads
pnfsmanager.limits.list-threads = 2

#  ---- Max chunk size in list replies
#
#   To avoid out of memory errors when listing large directories,
#   PnfsManager breaks up directory listings in chunk of entries. This
#   setting controls the maximum number of directory entries in a
#   chunk.
#
(forbidden)pnfsListChunkSize = Use pnfsmanager.limits.list-chunk-size
pnfsmanager.limits.list-chunk-size = 100

#  ---- Threshold for when to log slow requests
#
#   Threshold in milliseconds for when to log slow requests. Requests
#   with a processing time larger than the threshold are logged. Set
#   to 0 to disable. This can also be enabled at runtime using the
#   'set log slow threshold' command.
#
(forbidden)pnfsLogSlowThreshold = pnfsmanager.limits.log-slow-threshold
pnfsmanager.limits.log-slow-threshold=0


#  ---- Maximum number of requests in a processing queue
#
#   PnfsManager maintains a request queue per processing thread. This
#   setting specifies the queue length at which point new requests
#   will be denied rather than enqueued for processing. Set to 0 for
#   unlimitted queues.
#
(forbidden)pnfsQueueMaxSize = Use pnfsmanager.limits.queue-length
pnfsmanager.limits.queue-length = 0

#  ---- PnfsManager message folding
#
#   Whether to use message folding in PnfsManager. When message folding
#   is enabled, the PnfsManager will try to fold or collapse processing of
#   identical messages. This can reduce the load on PNFS or Chimera if a
#   large number of simultaneous requests on the same objects are performed.
#
(forbidden)pnfsFolding = Use pnfsmanager.enable.folding
(one-of?true|false)pnfsmanager.enable.folding = true

#  ---- Inherit file ownership when creating files and directories
#
#   By default new files and directories receive will be owned by the
#   person who created the files and directories. The owner field will
#   be the UID of the creator and the group field will be the primary
#   GID of the creator.
#
#   If this flag is set to true, then both the owner and the group
#   field will inherit the values from the parent directory.
#
#   In either case, a door may override the values with values
#   provided by the user.
#
(forbidden)pnfsInheritFileOwnership = Use pnfsmanager.enable.inherit-file-ownership
(one-of?true|false)pnfsmanager.enable.inherit-file-ownership = false

#  ---- Whether to verify lookup permissions for the entire path
#
#   For performance reasons dCache with PNFS only verified the lookup
#   permissions of the directory containing the file system entry
#   corresponding to the path. Ie only the lookup permissions for the
#   last parent directory of the path were enforced. For compatibility
#   reasons Chimera inherited these semantics.
#
#   When this option is set to true, Chimera will verify the lookup
#   permissions of all directories of a path.
#
(forbidden)pnfsVerifyAllLookups = Use pnfsmanager.enable.full-path-permission-check
(one-of?true|false)pnfsmanager.enable.full-path-permission-check = true

#  ---- Enabled ACL support
#
#   Set to true to enable ACL support.
#
(forbidden)aclEnabled = Use pnfsmanager.enable.acl
(one-of?true|false)pnfsmanager.enable.acl = false

#  ---- Default Access Latency and Retention Policy
#
#   These variables affect only newly created files.
#
#   Do not use OUTPUT.
#
(forbidden)DefaultRetentionPolicy = Use pnfsmanager.default-retention-policy
(one-of?CUSTODIAL|REPLICA|OUTPUT)pnfsmanager.default-retention-policy = CUSTODIAL

(forbidden)DefaultAccessLatency = Use pnfsmanager.default-access-latency
(one-of?ONLINE|NEARLINE)pnfsmanager.default-access-latency = NEARLINE

#  ---- Upload directory
#
pnfsmanager.upload-directory=${dcache.upload-directory}

#  ---- Configuration for database connection pool
#
#  The database connection pool reuses connections between successive
#  database operations.  By reusing connections dCache doesn't suffer
#  the overhead of establishing new database connections for each
#  operation.
#
#  The options here determine how the pnfsmanager behaves as the
#  number of concurrent requests fluctuates.
#

#
#  The maximum number of concurrent database connections.
#
pnfsmanager.db.connections.max = 30

#
#  The minimum number of idle database connections.
#
pnfsmanager.db.connections.idle = 1


#
# Database related settings reserved for internal use.
#
(immutable)pnfsmanager.db.host=${chimera.db.host}
(immutable)pnfsmanager.db.name=${chimera.db.name}
(immutable)pnfsmanager.db.user=${chimera.db.user}
(immutable)pnfsmanager.db.password=${chimera.db.password}
(immutable)pnfsmanager.db.password.file=${chimera.db.password.file}
(immutable)pnfsmanager.db.dialect=${chimera.db.dialect}
(immutable)pnfsmanager.db.url=${chimera.db.url}
(immutable)pnfsmanager.db.schema.changelog=${chimera.db.schema.changelog}
pnfsmanager.db.schema.auto=${dcache.db.schema.auto}

#
#  --- Last Access Time (atime) updates for files
#
#  This integer value controls whether and when dCache updates the last access
#  time of files on reading them.
#
#  Values <  0: atimes are never updated.
#  Values >= 0: The maximum absolute(!) difference (in seconds) between a file's
#               "new" atime and its curently stored one, where the atime is not
#               yet updated.
#               For example, when using a value of "4" and the old atime is (in
#               POSIX time) "1000000000", then atimes up to including
#               "1000000004" (but also down to "999999996") are not written;
#               "1000000005" or later (respectively "999999995" or earlier)
#               would be saved.
#
#  Updating the atimes less often (or not at all) may have performance benefits.
#
pnfsmanager.atime-gap=-1

##
#  -------------------------- Replica Management -----------------------------
##

(one-of?true|false|${dcache.enable.replica-management})pnfsmanager.enable.replica-management=${dcache.enable.replica-management}

#  ---- Whether to use a watchdog thread which does a periodic check
#       of the resilient pools to make sure replicas are properly constrained
#       between their respective minima and maxima.
#       Note that the watchdog can also be activated or deactivated
#       from the admin interface.
#
(one-of?true|false)pnfsmanager.replication.use-watchdog=false

#  ---- How often to run the check of resilient pools to see if
#       there are either insufficient or redundant copies.
#
pnfsmanager.replication.watchdog-period=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pnfsmanager.replication.watchdog-period.unit=DAY

#  ---- Max number of concurrent migration tasks (single pnfsid).
#
pnfsmanager.replication.concurrent-copy-jobs==50

#  ---- Max number of concurrent reduction tasks (single pnfsid).
#
pnfsmanager.replication.concurrent-removes-jobs==20

#  ---- Max number of concurrent namespace access tasks.
#
pnfsmanager.replication.concurrent-file-info-fetches=50

#  ---- Max number of concurrent pool monitor access tasks.
#
pnfsmanager.replication.concurrent-pool-info-fetches=50

#  ---- Max number of concurrent pool status change tasks (single pool).
#
pnfsmanager.replication.concurrent-pool-status-jobs=10

#  ---- Estimate of the number of pools in the system.
#       This setting will help to maintain an adequate size on certain
#       caches used internally.
pnfsmanager.replication.expected-number-of-pools=200

#  ---- Estimate of the average number of files on a pool.
#       This setting will help to maintain an adequate size on certain
#       caches used internally.
pnfsmanager.replication.average-files-per-pool=10000

#  ---- How much time to cache pnfs info before asking for it
#       again from the namespace database.  This includes file attributes
#       and replica locations for a given pnfsid.
#
pnfsmanager.replication.pnfs-info-lifetime=5
pnfsmanager.replication.pnfs-info-lifetime.unit=MINUTES

#  ---- How much time to cache pool group info before asking for it
#       again from either the pool manager or pool monitor.
#
pnfsmanager.replication.pool-info-lifetime=5
pnfsmanager.replication.pool-info-lifetime.unit=MINUTES

#  ---- How much time should pass between the reception of a pool
#       status change message and action taken on it by the replica manager.
#       In other words, how long to wait before we consider a pool DOWN/RESTART
#       message to be "permanent" and in need of launching an update task.
#
pnfsmanager.replication.grace-period-on-pool-status-change=30
pnfsmanager.replication.grace-period-on-pool-status-change.unit=MINUTES

pnfsmanager.callback=${dcache.service.pnfsmanager}

#  ---- How long for the remote service to wait for a response from pnfsmanager.
#
pnfsmanager.callback-timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pnfsmanager.callback-timeout.unit=MINUTES

pnfsmanager.service.poolmanager=${dcache.service.poolmanager}

#  ---- How long to wait for a response from the poolmanager.
#
pnfsmanager.service.poolmanager-timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pnfsmanager.service.poolmanager-timeout.unit=MINUTES

pnfsmanager.service.pinmanager=${dcache.service.pinmanager}

#  ---- How long to wait for a response from the pinmanager.
#
pnfsmanager.service.pinmanager-timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pnfsmanager.service.pinmanager-timeout.unit=MINUTES

#  ---- How long to wait for a response from the replicamanager component
#       running on the pools.
#
pnfsmanager.service.pool-timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pnfsmanager.service.pool-timeout.unit=MINUTES

#  ---- Chimera database connections dedicated solely to replica handling.
#
pnfsmanager.replication.db.connections.max=10
pnfsmanager.replication.db.connections.idle=1
